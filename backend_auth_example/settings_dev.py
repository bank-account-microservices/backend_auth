"""
Django settings for backend_auth_example project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=)6ug$=*^b11kxlv1!t01*1rk7v7g*k23(i)ene#l2bk0197k9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

#CORS_ALLOW_ALL_ORIGINS = True # Clase 8 nov. Luego se agrega el listado de frontends desde donde se puede conectar al backend

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auth_example', # #Se agrega la app creada desde GIT. Clase 8 de noviembre 
    'rest_framework', # Agragada
    #'corsheaders', # Agragada (qué fronts se pueden conectar al backend), luego deshabilitada. Todo lo de cors se saca para microservicios
                        # porque esta validación la hará el API Gateway
]

SIMPLE_JWT = {  # Clase 8 de nov   ---- JWT JSON Web Token
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15), # Reducir a 5 luego de las pruebas en postman esta duración del token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), # Los siguientes se dejan como en las guias
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False, # En principio estaba en True. Para microservicios se generan demasiados por tanta concurrencia, por eso cambia a False
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'corsheaders.middleware.CorsMiddleware', # Clase 8 nov. Se agregó en INSTALLED_APPS y luego se borra
]

REST_FRAMEWORK = {    #Clase 8 nov.
    'DEFAULT_PERMISSION_CLASSES' : (
        'rest_framework.permissions.AllowAny', # Coma para que sea una tupla de un solo elemento. rest_framework se agregó en INSTALLED_APPS
    ),                                        #trae de la app rest y traiga lo de permissions para ejecutar las clases
    'DEFAULT_AUTHENTICATION_CLASSES' : (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

AUTH_USER_MODEL = 'auth_example.User' # Clase 9 Nov. A dónde dirigirse para encontrar el modelo que está autenticando y comparar
ROOT_URLCONF = 'backend_auth_example.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend_auth_example.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = { # Clase 9 Nov. config base de datos local gestionada en TablePlus
    'default': {
        'ENGINE'    : 'django.db.backends.postgresql_psycopg2',
        'NAME'      : 'auth_ms',
        'USER'      : 'postgres',
        'PASSWORD'  : 'nicopostgres',
        'HOST'      : 'localhost',
        'PORT'      : '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
